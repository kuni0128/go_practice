package main

import (
    "fmt"
)

func main() {
    // float64型の精度の限界以上の値は丸められる
    fmt.Printf("%v\n", 1.0000000000000000)   // 1
    fmt.Printf("%v\n", 1.0000000000000001)   // 1
    fmt.Printf("%v\n", 1.0000000000000002)   // 1.0000000000000002
    fmt.Printf("%v\n", 1.0000000000000003)   // 1.0000000000000002
    fmt.Printf("%v\n", 1.0000000000000004)   // 1.0000000000000004
    fmt.Printf("%v\n", 1.0000000000000005)   // 1.0000000000000004

    // float32型だとさらに丸められる
    fmt.Printf("%v\n", float32(1.0000000000000000))   // 1
    fmt.Printf("%v\n", float32(1.0000000000000001))   // 1
    fmt.Printf("%v\n", float32(1.0000000000000002))   // 1
    fmt.Printf("%v\n", float32(1.0000000000000003))   // 1
    fmt.Printf("%v\n", float32(1.0000000000000004))   // 1
    fmt.Printf("%v\n", float32(1.0000000000000005))   // 1

    // 精度の違いは約2倍
    fmt.Printf("%v\n", float32(1.0) / float32(3.0))    // 0.33333334
    fmt.Printf("%v\n", float64(1.0) / float64(3.0))    // 0.3333333333333333

    // 浮動小数点から整数型へ型変換すると、0方向に切り捨てされる
    f := 3.14
    fmt.Printf("%v\n", int(f))    // 3
    ff := -3.14
    fmt.Printf("%v\n", int(ff))   // -3
}
